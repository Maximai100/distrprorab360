import React, { useState, useRef, useEffect } from 'react';
import { WorkStageModalProps, WorkStageStatus } from '../../types';
import { IconClose } from '../common/Icon';

export const WorkStageModal: React.FC<WorkStageModalProps> = ({ stage, onClose, onSave, showAlert }) => {
    const [title, setTitle] = useState(stage?.title || '');
    const [startDate, setStartDate] = useState(stage?.startDate || new Date().toISOString().split('T')[0]);
    const [endDate, setEndDate] = useState(stage?.endDate || new Date().toISOString().split('T')[0]);
    const [status, setStatus] = useState<WorkStageStatus>(stage?.status || 'planned');
    const [progress, setProgress] = useState(stage?.progress || 0);
    const modalRef = useRef<HTMLDivElement>(null);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 100% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    useEffect(() => {
        if (progress === 100 && status !== 'completed') {
            setStatus('completed');
        }
    }, [progress, status]);

    useEffect(() => {
        if (modalRef.current) {
            const focusableElements = modalRef.current.querySelectorAll<HTMLElement>(
                'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
            );
            const firstElement = focusableElements[0];
            if (firstElement) {
                firstElement.focus();
            }
        }
    }, []);

    const handleSave = () => {
        if (!title.trim()) {
            showAlert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞.');
            return;
        }
        if (!startDate || !endDate) {
            showAlert('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è.');
            return;
        }
        if (new Date(startDate) > new Date(endDate)) {
            showAlert('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è.');
            return;
        }
        onSave({ title: title.trim(), description: '', startDate, endDate, status, progress });
    };

    return (
        <div className="modal-overlay" onClick={onClose}>
            <div className="modal-content card" onClick={e => e.stopPropagation()} role="dialog" aria-modal="true" ref={modalRef}>
                <div className="modal-header">
                    <h2>{stage?.id ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∞–ø' : '–ù–æ–≤—ã–π —ç—Ç–∞–ø —Ä–∞–±–æ—Ç'}</h2>
                    <button onClick={onClose} className="close-btn" aria-label="–ó–∞–∫—Ä—ã—Ç—å"><IconClose/></button>
                </div>
                <div className="modal-body">
                    <label>–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞</label>
                    <input type="text" value={title} onChange={(e) => setTitle(e.target.value)} placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, '–ß–µ—Ä–Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã'" />
                    <label>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</label>
                    <input type="date" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
                    <label>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</label>
                    <input type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
                    
                    <label>–°—Ç–∞—Ç—É—Å —ç—Ç–∞–ø–∞</label>
                    <select value={status} onChange={(e) => setStatus(e.target.value as WorkStageStatus)}>
                        <option value="planned">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω</option>
                        <option value="in_progress">–í —Ä–∞–±–æ—Ç–µ</option>
                        <option value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω</option>
                    </select>
                    
                    <label>–ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</label>
                    <div className="progress-input-container">
                        <input 
                            type="range" 
                            min="0" 
                            max="100" 
                            value={progress} 
                            onChange={(e) => setProgress(Number(e.target.value))}
                            className="progress-slider"
                        />
                        <span className="progress-value">{progress}%</span>
                    </div>
                    
                    {/* –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ 100% –ø—Ä–æ–≥—Ä–µ—Å—Å–µ */}
                    {progress === 100 && status !== 'completed' && (
                        <div className="auto-status-update">
                            <small>üí° –ü—Ä–æ–≥—Ä–µ—Å—Å 100% - —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ "–ó–∞–≤–µ—Ä—à–µ–Ω"</small>
                        </div>
                    )}
                </div>
                <div className="modal-footer">
                    <button onClick={handleSave} className="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                </div>
            </div>
        </div>
    );
};