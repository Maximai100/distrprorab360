import { useState, useEffect, useCallback } from 'react';
import { FinanceEntry, WorkStage, ProjectFinancials } from '../types';
import { supabase } from '../supabaseClient';
import { useFileStorage } from './useFileStorage';

export const useProjectData = () => {
    console.log('useProjectData: –•—É–∫ useProjectData –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è');
    
    const [financeEntries, setFinanceEntries] = useState<FinanceEntry[]>([]);
    const [workStages, setWorkStages] = useState<WorkStage[]>([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
    const { uploadFileWithFallback } = useFileStorage();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ Supabase —Å retry –ª–æ–≥–∏–∫–æ–π
    const loadProjectData = useCallback(async (projectId: string, retryCount = 0) => {
        if (!projectId) return;
        
        setLoading(true);
        setError(null);
        
        try {
            console.log('üîÑ useProjectData: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞:', projectId, retryCount > 0 ? `(–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1})` : '');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            await new Promise(resolve => setTimeout(resolve, 100 * (retryCount + 1)));
            
            const { data: { user }, error: userError } = await supabase.auth.getUser();
            if (userError) {
                console.error('useProjectData: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
                throw userError;
            }
            if (!user) {
                console.log('useProjectData: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
                setLoading(false);
                return;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: —Ñ–∏–Ω–∞–Ω—Å—ã –∏ —ç—Ç–∞–ø—ã —Ä–∞–±–æ—Ç
            const [financeRes, stagesRes] = await Promise.allSettled([
                supabase
                    .from('finance_entries')
                    .select('*')
                    .eq('user_id', user.id)
                    .eq('project_id', projectId)
                    .order('created_at', { ascending: false }),
                supabase
                    .from('work_stages')
                    .select('*')
                    .eq('user_id', user.id)
                    .eq('project_id', projectId)
                    .order('created_at', { ascending: false })
            ]);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Promise.allSettled
            const financeData = financeRes.status === 'fulfilled' ? financeRes.value : null;
            const stagesData = stagesRes.status === 'fulfilled' ? stagesRes.value : null;
            
            if (financeRes.status === 'rejected') {
                console.error('useProjectData: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π:', financeRes.reason);
                throw financeRes.reason;
            }
            if (stagesRes.status === 'rejected') {
                console.error('useProjectData: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ç–∞–ø–æ–≤ —Ä–∞–±–æ—Ç:', stagesRes.reason);
                throw stagesRes.reason;
            }
            
            if (financeData?.error) {
                console.error('useProjectData: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π:', financeData.error);
                throw financeData.error;
            }
            if (stagesData?.error) {
                console.error('useProjectData: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ç–∞–ø–æ–≤ —Ä–∞–±–æ—Ç:', stagesData.error);
                throw stagesData.error;
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            const mappedFinanceEntries: FinanceEntry[] = ((financeData?.data as any[]) || []).map((row: any) => ({
                id: row.id,
                projectId: row.project_id,
                type: row.type,
                amount: row.amount,
                description: row.description,
                date: row.date,
                category: row.category || undefined,
                receipt_url: row.receipt_url || undefined,
                createdAt: row.created_at,
                updatedAt: row.updated_at,
            }));

            const mappedWorkStages: WorkStage[] = ((stagesData?.data as any[]) || []).map((row: any) => ({
                id: row.id,
                projectId: row.project_id,
                title: row.title,
                description: row.description || '',
                startDate: row.start_date || '',
                endDate: row.end_date || undefined,
                status: row.status || 'planned',
                progress: row.progress || 0,
                createdAt: row.created_at,
                updatedAt: row.updated_at,
            }));

            setFinanceEntries(mappedFinanceEntries);
            setWorkStages(mappedWorkStages);
            
            console.log('‚úÖ useProjectData: –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
                financeEntries: mappedFinanceEntries.length,
                workStages: mappedWorkStages.length
            });
            
        } catch (error) {
            console.error('‚ùå useProjectData: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞:', error);
            
            // Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
            if (retryCount < 2 && error instanceof Error && 
                (error.message.includes('NetworkError') || error.message.includes('fetch'))) {

                setTimeout(() => {
                    loadProjectData(projectId, retryCount + 1);
                }, 1000 * (retryCount + 1));
                return;
            }
            
            // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            if (error instanceof Error) {
                if (error.message.includes('NetworkError') || error.message.includes('fetch')) {
                    setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
                } else if (error.message.includes('auth')) {
                    setError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
                } else {
                    setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
                }
            } else {
                setError('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
            }
        } finally {
            setLoading(false);
        }
    }, []);

    // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const addFinanceEntry = useCallback(async (projectId: string, entryData: Omit<FinanceEntry, 'id' | 'projectId' | 'createdAt' | 'updatedAt'>, receiptFile?: File) => {
        let receiptUrl: string | undefined;
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ñ–∞–π–ª —á–µ–∫–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
        if (receiptFile) {
            try {

                const uploadResult = await uploadFileWithFallback('receipts', receiptFile);
                
                if (uploadResult.error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞:', uploadResult.error);
                    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫: ${uploadResult.error}`);
                }
                
                receiptUrl = uploadResult.publicUrl;

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞:', error);
                throw error;
            }
        }
        
        // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º
        const id = generateUUID();
        const now = new Date().toISOString();
        const optimistic: FinanceEntry = {
            id,
            projectId,
            type: entryData.type,
            amount: entryData.amount,
            description: entryData.description,
            date: entryData.date,
            category: entryData.category,
            receipt_url: receiptUrl,
            createdAt: now,
            updatedAt: now,
        };
        setFinanceEntries(prev => [optimistic, ...prev]);

        try {
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            const { error } = await supabase
                .from('finance_entries')
                .insert({
                    id,
                    user_id: user.id,
                    project_id: projectId,
                    type: entryData.type,
                    amount: entryData.amount,
                    description: entryData.description,
                    date: entryData.date,
                    category: entryData.category || null,
                    receipt_url: receiptUrl || null,
                    created_at: now,
                    updated_at: now,
                })
                .select('id')
                .single();
            if (error) throw error;
            return optimistic;
        } catch (error) {
            // –û—Ç–∫–∞—Ç
            setFinanceEntries(prev => prev.filter(e => e.id !== id));
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:', error);
            throw error;
        }
    }, [uploadFileWithFallback]);
    
    const updateFinanceEntry = useCallback(async (id: string, updates: Partial<FinanceEntry>, receiptFile?: File) => {
        let receiptUrl: string | undefined = updates.receipt_url;
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —á–µ–∫–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
        if (receiptFile) {
            try {

                const uploadResult = await uploadFileWithFallback('receipts', receiptFile);
                
                if (uploadResult.error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞:', uploadResult.error);
                    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫: ${uploadResult.error}`);
                }
                
                receiptUrl = uploadResult.publicUrl;

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ–∫–∞:', error);
                throw error;
            }
        }
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            }
            
            // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            let prevEntry: FinanceEntry | undefined;
            setFinanceEntries(prev => {
                prevEntry = prev.find(e => e.id === id);
                return prev.map(e => e.id === id ? ({ ...e, ...updates, receipt_url: receiptUrl ?? e.receipt_url, updatedAt: new Date().toISOString() } as FinanceEntry) : e);
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ Supabase
            const updateData: any = {};
            if (updates.type !== undefined) updateData.type = updates.type;
            if (updates.amount !== undefined) updateData.amount = updates.amount;
            if (updates.description !== undefined) updateData.description = updates.description;
            if (updates.date !== undefined) updateData.date = updates.date;
            if (updates.category !== undefined) updateData.category = updates.category;
            if (receiptUrl !== undefined) updateData.receipt_url = receiptUrl;
            
            const { error } = await supabase
                .from('finance_entries')
                .update(updateData)
                .eq('id', id)
                .eq('user_id', user.id)
                .select('id')
                .single();
            if (error) throw error;
            console.log('üìÑ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ):', id);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:', error);
            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            setFinanceEntries(prev => prev.map(e => e.id === id ? (prevEntry as FinanceEntry) : e));
            throw error;
        }
    }, [uploadFileWithFallback]);
    
    const deleteFinanceEntry = useCallback(async (id: string) => {
        try {
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            }
            
            const { error } = await supabase
                .from('finance_entries')
                .delete()
                .eq('id', id)
                .eq('user_id', user.id);
            
            if (error) {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:', error);
                throw error;
            }
            
            setFinanceEntries(prev => prev.filter(f => f.id !== id));

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:', error);
            throw error;
        }
    }, []);
    
    const getFinanceEntriesByProject = useCallback((projectId: string) => {
        return financeEntries.filter(f => f.projectId === projectId);
    }, [financeEntries]);

    // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —ç—Ç–∞–ø–∞–º–∏ —Ä–∞–±–æ—Ç
    const addWorkStage = useCallback(async (projectId: string, stageData: Omit<WorkStage, 'id' | 'projectId' | 'createdAt' | 'updatedAt'>) => {
        try {
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            }
            
            const { data, error } = await supabase
                .from('work_stages')
                .insert({
                    user_id: user.id,
                    project_id: projectId,
                    title: stageData.title,
                    description: stageData.description || null,
                    start_date: stageData.startDate || null,
                    end_date: stageData.endDate || null,
                    status: stageData.status || 'planned',
                    progress: stageData.progress || 0,
                })
                .select()
                .single();
            
            if (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–∞–ø–∞ —Ä–∞–±–æ—Ç:', error);
                throw error;
            }
            
            const newStage: WorkStage = {
                id: data.id,
                projectId: data.project_id,
                title: data.title,
                description: data.description || '',
                startDate: data.start_date || '',
                endDate: data.end_date || undefined,
                status: data.status || 'planned',
                progress: data.progress || 0,
                createdAt: data.created_at,
                updatedAt: data.updated_at,
            };
            
            setWorkStages(prev => [...prev, newStage]);

            return newStage;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç—Ç–∞–ø–∞ —Ä–∞–±–æ—Ç:', error);
            throw error;
        }
    }, []);
    
    const updateWorkStage = useCallback(async (id: string, updates: Partial<WorkStage>) => {
        try {
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            }
            
            const updateData: any = {};
            if (updates.title !== undefined) updateData.title = updates.title;
            if (updates.description !== undefined) updateData.description = updates.description;
            if (updates.startDate !== undefined) updateData.start_date = updates.startDate;
            if (updates.endDate !== undefined) updateData.end_date = updates.endDate;
            if (updates.status !== undefined) updateData.status = updates.status;
            if (updates.progress !== undefined) updateData.progress = updates.progress;
            
            const { data, error } = await supabase
                .from('work_stages')
                .update(updateData)
                .eq('id', id)
                .eq('user_id', user.id)
                .select()
                .single();
            
            if (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞ —Ä–∞–±–æ—Ç:', error);
                throw error;
            }
            
            const updatedStage: WorkStage = {
                id: data.id,
                projectId: data.project_id,
                title: data.title,
                description: data.description || '',
                startDate: data.start_date || '',
                endDate: data.end_date || undefined,
                status: data.status || 'planned',
                progress: data.progress || 0,
                createdAt: data.created_at,
                updatedAt: data.updated_at,
            };
            
            setWorkStages(prev => prev.map(stage => 
                stage.id === id ? updatedStage : stage
            ));

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç—Ç–∞–ø–∞ —Ä–∞–±–æ—Ç:', error);
            throw error;
        }
    }, []);
    
    const deleteWorkStage = useCallback(async (id: string) => {
        try {
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            }
            
            const { error } = await supabase
                .from('work_stages')
                .delete()
                .eq('id', id)
                .eq('user_id', user.id);
            
            if (error) {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞ —Ä–∞–±–æ—Ç:', error);
                throw error;
            }
            
            setWorkStages(prev => prev.filter(w => w.id !== id));

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç—Ç–∞–ø–∞ —Ä–∞–±–æ—Ç:', error);
            throw error;
        }
    }, []);
    
    const getWorkStagesByProject = useCallback((projectId: string) => {
        return workStages.filter(w => w.projectId === projectId);
    }, [workStages]);

    // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã
    const calculateProjectFinancials = useCallback((projectId: string, estimates: any[]): ProjectFinancials => {
        const projectEstimates = estimates.filter(e => e.project_id === projectId);
        const projectFinances = getFinanceEntriesByProject(projectId);
        
        const estimateTotal = projectEstimates.reduce((sum, est) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ est.items —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
            if (!est.items || !Array.isArray(est.items)) {
                console.warn('Estimate items is undefined or not an array:', est);
                return sum;
            }
            
            const subtotal = est.items.reduce((acc: number, item: any) => acc + (item.quantity * item.price), 0);
            const discountAmount = est.discountType === 'percent' ? subtotal * (est.discount / 100) : est.discount;
            const totalAfterDiscount = subtotal - discountAmount;
            const taxAmount = totalAfterDiscount * (est.tax / 100);
            return sum + totalAfterDiscount + taxAmount;
        }, 0);
        
        const paidTotal = projectFinances
            .filter(f => f.type === 'income')
            .reduce((sum, f) => sum + f.amount, 0);
        
        const expensesTotal = projectFinances
            .filter(f => f.type === 'expense')
            .reduce((sum, f) => sum + f.amount, 0);
        
        const expensesBreakdown = projectFinances
            .filter(f => f.type === 'expense')
            .reduce((acc, f) => {
                const categoryName = f.category || '–î—Ä—É–≥–æ–µ';
                acc[categoryName] = (acc[categoryName] || 0) + f.amount;
                return acc;
            }, {} as Record<string, number>);
        
        const profit = paidTotal - expensesTotal;
        const profitability = estimateTotal > 0 ? (profit / estimateTotal) * 100 : 0;
        
        const cashFlowEntries = projectFinances.map(f => ({
            date: f.date,
            type: f.type as 'income' | 'expense',
            amount: f.amount,
            description: f.description
        })).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
        
        return {
            estimateTotal,
            paidTotal,
            expensesTotal,
            expensesBreakdown: Object.entries(expensesBreakdown).map(([categoryName, amount]) => ({
                categoryName,
                amount
            })),
            profit,
            profitability,
            cashFlowEntries
        };
    }, [getFinanceEntriesByProject]);

    return {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        financeEntries,
        workStages,
        loading,
        error,
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        loadProjectData,
        
        // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        addFinanceEntry,
        updateFinanceEntry,
        deleteFinanceEntry,
        getFinanceEntriesByProject,
        
        // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —ç—Ç–∞–ø–∞–º–∏ —Ä–∞–±–æ—Ç
        addWorkStage,
        updateWorkStage,
        deleteWorkStage,
        getWorkStagesByProject,
        
        // –£—Ç–∏–ª–∏—Ç—ã
        calculateProjectFinancials,
    };
};
