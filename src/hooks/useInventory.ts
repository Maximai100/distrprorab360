import { useState, useCallback, useEffect } from 'react';
import { supabase } from '../supabaseClient';
import { Tool, Consumable } from '../types';
import type { Session } from '@supabase/supabase-js';
import { useFileStorage } from './useFileStorage';
import { dataService } from '../services/storageService';

export const useInventory = (session: Session | null) => {
    const [tools, setTools] = useState<Tool[]>([]);
    const [consumables, setConsumables] = useState<Consumable[]>([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
    const { uploadFileWithFallback } = useFileStorage();

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const fetchAllInventory = useCallback(async (session: Session | null) => {
        if (!session?.user?.id) {

            setTools([]);
            setConsumables([]);
            return;
        }

        setLoading(true);
        setError(null);

        try {

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const [toolsRes, consumablesRes] = await Promise.all([
                supabase
                    .from('tools')
                    .select('*')
                    .eq('user_id', session.user.id)
                    .order('created_at', { ascending: false }),
                supabase
                    .from('consumables')
                    .select('*')
                    .eq('user_id', session.user.id)
                    .order('created_at', { ascending: false })
            ]);

            if (toolsRes.error) {
                console.error('üîß useInventory: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:', toolsRes.error);
                throw toolsRes.error;
            }
            if (consumablesRes.error) {
                console.error('üîß useInventory: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤:', consumablesRes.error);
                throw consumablesRes.error;
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            const transformedTools: Tool[] = ((toolsRes.data as any[]) || []).map(tool => {
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º location –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                let appLocation = tool.location || undefined;
                if (tool.location && tool.location.startsWith('project_')) {
                    appLocation = 'on_project';
                }

                return {
                    id: tool.id,
                    name: tool.name,
                    category: tool.category || undefined,
                    condition: tool.condition || undefined,
                    location: appLocation,
                    notes: tool.notes || undefined,
                    image_url: tool.image_url || undefined,
                    purchase_date: tool.purchase_date || undefined,
                    purchase_price: tool.purchase_price || undefined,
                    projectId: tool.project_id || null,
                    createdAt: tool.created_at,
                    updatedAt: tool.updated_at,
                };
            });

            const transformedConsumables: Consumable[] = ((consumablesRes.data as any[]) || []).map(consumable => ({
                id: consumable.id,
                name: consumable.name,
                quantity: consumable.quantity || 0,
                unit: consumable.unit || undefined,
                location: consumable.location || undefined,
                projectId: consumable.project_id || null,
                createdAt: consumable.created_at,
                updatedAt: consumable.updated_at,
            }));

            setTools(transformedTools);
            setConsumables(transformedConsumables);
            // –ö–µ—à–∏—Ä—É–µ–º
            dataService.setTools(transformedTools);
            dataService.setConsumables(transformedConsumables);

        } catch (error) {
            console.error('üîß useInventory: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
            setError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        } finally {
            setLoading(false);
        }
    }, []);

    // –ö–µ—à‚Äë–ø–µ—Ä–≤—ã–π –ø–æ–∫–∞–∑
    useEffect(() => {
        const cachedTools = dataService.getTools();
        if (cachedTools && cachedTools.length) setTools(cachedTools);
        const cachedConsumables = dataService.getConsumables();
        if (cachedConsumables && cachedConsumables.length) setConsumables(cachedConsumables);
    }, []);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    const addTool = useCallback(async (toolData: Omit<Tool, 'id' | 'createdAt' | 'updatedAt'>, imageFile?: File) => {
        if (!session?.user?.id) {
            console.error('üîß useInventory: –ù–µ—Ç —Å–µ—Å—Å–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞');
            return;
        }

        setLoading(true);
        setError(null);

        try {
            let imageUrl: string | undefined = toolData.image_url;
            
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
            if (imageFile) {
                try {

                    const uploadResult = await uploadFileWithFallback('tools-images', imageFile);
                    
                    if (uploadResult.error) {
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', uploadResult.error);
                        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${uploadResult.error}`);
                    }
                    
                    imageUrl = uploadResult.publicUrl;

                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
                    throw error;
                }
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ location –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            let dbLocation = toolData.location || null;
            if (toolData.location === 'on_project' && toolData.projectId) {
                dbLocation = `project_${toolData.projectId}`;
            }

            const insertPayload = {
                user_id: session.user.id,
                name: toolData.name,
                category: toolData.category || null,
                condition: toolData.condition || null,
                location: dbLocation,
                notes: toolData.notes || null,
                image_url: imageUrl || null,
                purchase_date: toolData.purchase_date || null,
                purchase_price: toolData.purchase_price || null,
                project_id: toolData.projectId || null,
            };

            const { data, error } = await supabase
                .from('tools')
                .insert(insertPayload)
                .select()
                .single();

            if (error) {
                console.error('üîß useInventory: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:', error);
                throw error;
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            const newTool: Tool = {
                id: data.id,
                name: data.name,
                category: data.category || undefined,
                condition: data.condition || undefined,
                location: data.location || undefined,
                notes: data.notes || undefined,
                image_url: data.image_url || undefined,
                purchase_date: data.purchase_date || undefined,
                purchase_price: data.purchase_price || undefined,
                projectId: data.project_id || null,
                createdAt: data.created_at,
                updatedAt: data.updated_at,
            };

            setTools(prev => [newTool, ...prev]);

        } catch (error) {
            console.error('üîß useInventory: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:', error);
            setError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞');
        } finally {
            setLoading(false);
        }
    }, [session, uploadFileWithFallback]);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    const updateTool = useCallback(async (toolData: Tool, imageFile?: File) => {
        if (!session?.user?.id) {
            console.error('üîß useInventory: –ù–µ—Ç —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞');
            return;
        }

        setLoading(true);
        setError(null);

        try {
            let imageUrl: string | undefined = toolData.image_url;
            
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
            if (imageFile) {
                try {

                    const uploadResult = await uploadFileWithFallback('tools-images', imageFile);
                    
                    if (uploadResult.error) {
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', uploadResult.error);
                        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${uploadResult.error}`);
                    }
                    
                    imageUrl = uploadResult.publicUrl;

                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
                    throw error;
                }
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ location –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            let dbLocation = toolData.location || null;
            if (toolData.location === 'on_project' && toolData.projectId) {
                dbLocation = `project_${toolData.projectId}`;
            }

            const updatePayload: any = {
                name: toolData.name,
                category: toolData.category || null,
                condition: toolData.condition || null,
                location: dbLocation,
                notes: toolData.notes || null,
                image_url: imageUrl || null,
                purchase_date: toolData.purchase_date || null,
                purchase_price: toolData.purchase_price || null,
                project_id: toolData.projectId || null,
            };

            const { data, error } = await supabase
                .from('tools')
                .update(updatePayload)
                .eq('id', toolData.id)
                .eq('user_id', session.user.id)
                .select()
                .single();

            if (error) {
                console.error('üîß useInventory: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:', error);
                throw error;
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            const updatedTool: Tool = {
                id: data.id,
                name: data.name,
                category: data.category || undefined,
                condition: data.condition || undefined,
                location: data.location || undefined,
                notes: data.notes || undefined,
                image_url: data.image_url || undefined,
                purchase_date: data.purchase_date || undefined,
                purchase_price: data.purchase_price || undefined,
                projectId: data.project_id || null,
                createdAt: data.created_at,
                updatedAt: data.updated_at,
            };

            setTools(prev => prev.map(tool => tool.id === toolData.id ? updatedTool : tool));

        } catch (error) {
            console.error('üîß useInventory: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:', error);
            setError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞');
        } finally {
            setLoading(false);
        }
    }, [session, uploadFileWithFallback]);

    // –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    const deleteTool = useCallback(async (toolId: string) => {
        if (!session?.user?.id) {
            console.error('üîß useInventory: –ù–µ—Ç —Å–µ—Å—Å–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞');
            return;
        }

        setLoading(true);
        setError(null);

        try {
            const { error } = await supabase
                .from('tools')
                .delete()
                .eq('id', toolId)
                .eq('user_id', session.user.id);

            if (error) {
                console.error('üîß useInventory: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:', error);
                throw error;
            }

            setTools(prev => prev.filter(tool => tool.id !== toolId));

        } catch (error) {
            console.error('üîß useInventory: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:', error);
            setError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞');
        } finally {
            setLoading(false);
        }
    }, [session]);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞
    const addConsumable = useCallback(async (consumableData: Omit<Consumable, 'id' | 'createdAt' | 'updatedAt'>) => {
        if (!session?.user?.id) {
            console.error('üîß useInventory: –ù–µ—Ç —Å–µ—Å—Å–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞');
            return;
        }

        setLoading(true);
        setError(null);

        try {
            const insertPayload = {
                user_id: session.user.id,
                name: consumableData.name,
                quantity: consumableData.quantity || 0,
                unit: consumableData.unit || null,
                location: consumableData.location || null,
                project_id: consumableData.projectId || null,
            };

            const { data, error } = await supabase
                .from('consumables')
                .insert(insertPayload)
                .select()
                .single();

            if (error) {
                console.error('üîß useInventory: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞:', error);
                throw error;
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            const newConsumable: Consumable = {
                id: data.id,
                name: data.name,
                quantity: data.quantity || 0,
                unit: data.unit || undefined,
                location: data.location || undefined,
                projectId: data.project_id || null,
                createdAt: data.created_at,
                updatedAt: data.updated_at,
            };

            setConsumables(prev => [newConsumable, ...prev]);

        } catch (error) {
            console.error('üîß useInventory: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞:', error);
            setError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞');
        } finally {
            setLoading(false);
        }
    }, [session]);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞
    const updateConsumable = useCallback(async (consumableData: Consumable) => {
        if (!session?.user?.id) {
            console.error('üîß useInventory: –ù–µ—Ç —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞');
            return;
        }

        setLoading(true);
        setError(null);

        try {
            const updatePayload = {
                name: consumableData.name,
                quantity: consumableData.quantity || 0,
                unit: consumableData.unit || null,
                location: consumableData.location || null,
                project_id: consumableData.projectId || null,
            };

            const { data, error } = await supabase
                .from('consumables')
                .update(updatePayload)
                .eq('id', consumableData.id)
                .eq('user_id', session.user.id)
                .select()
                .single();

            if (error) {
                console.error('üîß useInventory: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞:', error);
                throw error;
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            const updatedConsumable: Consumable = {
                id: data.id,
                name: data.name,
                quantity: data.quantity || 0,
                unit: data.unit || undefined,
                location: data.location || undefined,
                projectId: data.project_id || null,
                createdAt: data.created_at,
                updatedAt: data.updated_at,
            };

            setConsumables(prev => prev.map(consumable => 
                consumable.id === consumableData.id ? updatedConsumable : consumable
            ));

        } catch (error) {
            console.error('üîß useInventory: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞:', error);
            setError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞');
        } finally {
            setLoading(false);
        }
    }, [session]);

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞
    const deleteConsumable = useCallback(async (consumableId: string) => {
        if (!session?.user?.id) {
            console.error('üîß useInventory: –ù–µ—Ç —Å–µ—Å—Å–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞');
            return;
        }

        setLoading(true);
        setError(null);

        try {
            const { error } = await supabase
                .from('consumables')
                .delete()
                .eq('id', consumableId)
                .eq('user_id', session.user.id);

            if (error) {
                console.error('üîß useInventory: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞:', error);
                throw error;
            }

            setConsumables(prev => prev.filter(consumable => consumable.id !== consumableId));

        } catch (error) {
            console.error('üîß useInventory: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞:', error);
            setError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞');
        } finally {
            setLoading(false);
        }
    }, [session]);

    return {
        // –°–æ—Å—Ç–æ—è–Ω–∏—è
        tools,
        consumables,
        loading,
        error,
        
        // –§—É–Ω–∫—Ü–∏–∏
        fetchAllInventory,
        addTool,
        updateTool,
        deleteTool,
        addConsumable,
        updateConsumable,
        deleteConsumable,
    };
};
