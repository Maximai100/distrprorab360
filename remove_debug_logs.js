#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
function findFiles(dir, extensions) {
  const files = [];
  const items = fs.readdirSync(dir);
  
  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
      files.push(...findFiles(fullPath, extensions));
    } else if (stat.isFile() && extensions.some(ext => item.endsWith(ext))) {
      files.push(fullPath);
    }
  }
  
  return files;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –ª–æ–≥–æ–≤
function removeDebugLogs(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let modified = false;
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –ª–æ–≥–æ–≤
    const debugPatterns = [
      // console.log —Å [DEBUG]
      /^\s*console\.log\([^)]*\[DEBUG\][^)]*\);\s*$/gm,
      // console.log —Å —ç–º–æ–¥–∑–∏ –æ—Ç–ª–∞–¥–∫–∏
      /^\s*console\.log\([^)]*[üîßüöÄüîç][^)]*\);\s*$/gm,
      // console.log —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –æ—Ç–ª–∞–¥–∫–∏
      /^\s*console\.log\([^)]*(?:App:|useCompanyProfile|useEstimates|CalculatorModule|handleLoadEstimate|handleNewEstimate|handleSaveEstimate|handleDeleteEstimate)[^)]*\);\s*$/gm,
      // console.log —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
      /^\s*console\.log\([^)]*(?:–ü–†–û–í–ï–†–ö–ê|–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê|–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï|–ó–∞–≥—Ä—É–∂–∞–µ–º|–ü–µ—Ä–µ—Ö–æ–¥–∏–º|–ù–∞—á–∏–Ω–∞–µ–º|–ó–∞–≤–µ—Ä—à–µ–Ω–æ)[^)]*\);\s*$/gm,
      // console.log —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
      /^\s*console\.log\([^)]*(?:–®–∞–≥ \d+|–ü–æ–ª—É—á–µ–Ω–Ω—ã–π|–¢–∏–ø|–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ|–†–µ–∑—É–ª—å—Ç–∞—Ç|–ê–Ω–∞–ª–∏–∑)[^)]*\);\s*$/gm,
    ];
    
    // –£–¥–∞–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
    for (const pattern of debugPatterns) {
      const matches = content.match(pattern);
      if (matches) {
        content = content.replace(pattern, '');
        modified = true;
        console.log(`–£–¥–∞–ª–µ–Ω–æ ${matches.length} –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –ª–æ–≥–æ–≤ –∏–∑ ${path.relative(process.cwd(), filePath)}`);
      }
    }
    
    // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤
    content = content.replace(/\n\s*\n\s*\n/g, '\n\n');
    
    if (modified) {
      fs.writeFileSync(filePath, content, 'utf8');
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const srcDir = path.join(__dirname, 'src');
  
  if (!fs.existsSync(srcDir)) {
    console.error('–ü–∞–ø–∫–∞ src –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    process.exit(1);
  }
  
  console.log('–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏...');
  
  const files = findFiles(srcDir, ['.ts', '.tsx', '.js', '.jsx']);
  let processedCount = 0;
  let modifiedCount = 0;
  
  for (const file of files) {
    processedCount++;
    if (removeDebugLogs(file)) {
      modifiedCount++;
    }
  }
  
  console.log(`\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedCount}`);
  console.log(`–ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${modifiedCount}`);
  console.log('–û—á–∏—Å—Ç–∫–∞ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

if (require.main === module) {
  main();
}

module.exports = { removeDebugLogs, findFiles };
