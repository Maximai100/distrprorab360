import { useState, useEffect, useCallback } from 'react';
import { Task } from '../types';
import { supabase } from '../supabaseClient';
import type { Session } from '@supabase/supabase-js';
import { dataService } from '../services/storageService';

export const useTasks = (session: Session | null) => {
    console.log('useTasks: –•—É–∫ useTasks –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è');
    const [tasks, setTasks] = useState<Task[]>([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const fetchAllTasks = useCallback(async (session: Session | null) => {
        if (!session?.user) {
            console.log('useTasks: –ù–µ—Ç —Å–µ—Å—Å–∏–∏, –æ—á–∏—â–∞–µ–º –∑–∞–¥–∞—á–∏');
            setTasks([]);
            return;
        }

        setLoading(true);
        setError(null);

        try {

            const { data, error } = await supabase
                .from('tasks')
                .select('*')
                .eq('user_id', session.user.id)
                .order('created_at', { ascending: false });

            if (error) {
                console.error('‚ùå useTasks: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:', error);
                setError(error.message);
                return;
            }

            console.log('‚úÖ useTasks: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á:', data?.length || 0);

            if (data) {
                const mappedTasks: Task[] = data.map((row: any) => ({
                    id: row.id,
                    title: row.title,
                    projectId: row.project_id,
                    isCompleted: row.is_completed,
                    priority: row.priority,
                    tags: row.tags || [],
                    dueDate: row.due_date,
                    createdAt: row.created_at,
                    updatedAt: row.updated_at,
                }));

                setTasks(mappedTasks);
                // –ö–µ—à–∏—Ä—É–µ–º –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
                dataService.setTasks(mappedTasks);
            } else {
                setTasks([]);
            }
        } catch (err) {
            console.error('‚ùå useTasks: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á:', err);
            setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        } finally {
            setLoading(false);
        }
    }, []);

    // –ö–µ—à‚Äë–ø–µ—Ä–≤—ã–π –ø–æ–∫–∞–∑ –∑–∞–¥–∞—á
    useEffect(() => {
        const cached = dataService.getTasks();
        if (cached && cached.length) setTasks(cached);
    }, []);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    const addTask = useCallback(async (taskData: {
        title: string;
        projectId?: string | null;
        priority?: 'low' | 'medium' | 'high' | 'urgent';
        tags?: string[];
        dueDate?: string | null;
    }) => {
        if (!session?.user) {
            console.error('useTasks: –ù–µ—Ç —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏');
            return null;
        }

        try {
            console.log('üîÑ useTasks: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É (–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ):', taskData);
            const now = new Date().toISOString();
            const optimistic: Task = {
                id: `temp_${Date.now()}`,
                title: taskData.title,
                projectId: taskData.projectId || null,
                isCompleted: false,
                priority: taskData.priority || 'medium',
                tags: taskData.tags || [],
                dueDate: taskData.dueDate || null,
                createdAt: now,
                updatedAt: now,
            };
            setTasks(prev => [optimistic, ...prev]);

            const insertData = {
                user_id: session.user.id,
                project_id: taskData.projectId || null,
                title: taskData.title,
                is_completed: false,
                priority: taskData.priority || 'medium',
                tags: taskData.tags || [],
                due_date: taskData.dueDate || null,
            };

            const { data, error } = await supabase
                .from('tasks')
                .insert([insertData])
                .select()
                .single();

            if (error) throw error;

            const newTask: Task = {
                id: data.id,
                title: data.title,
                projectId: data.project_id,
                isCompleted: data.is_completed,
                priority: data.priority,
                tags: data.tags || [],
                dueDate: data.due_date,
                createdAt: data.created_at,
                updatedAt: data.updated_at,
            };

            setTasks(prev => prev.map(t => t.id === optimistic.id ? newTask : t));
            return newTask;
        } catch (err) {
            console.error('‚ùå useTasks: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err);
            // –û—Ç–∫–∞—Ç
            setTasks(prev => prev.filter(t => !t.id.startsWith('temp_')));
            setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            return null;
        }
    }, [session]);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    const updateTask = useCallback(async (taskId: string, updates: Partial<Task>) => {
        if (!session?.user) {
            console.error('useTasks: –ù–µ—Ç —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');
            return null;
        }

        try {

            const updateData: any = {};
            if (updates.title !== undefined) updateData.title = updates.title;
            if (updates.projectId !== undefined) updateData.project_id = updates.projectId;
            if (updates.isCompleted !== undefined) updateData.is_completed = updates.isCompleted;
            if (updates.priority !== undefined) updateData.priority = updates.priority;
            if (updates.tags !== undefined) updateData.tags = updates.tags;
            if (updates.dueDate !== undefined) updateData.due_date = updates.dueDate;
            // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            let prevTask: Task | undefined;
            setTasks(prev => {
                prevTask = prev.find(t => t.id === taskId);
                return prev.map(t => t.id === taskId ? ({ ...t, ...updates, updatedAt: new Date().toISOString() } as Task) : t);
            });

            const { data, error } = await supabase
                .from('tasks')
                .update(updateData)
                .eq('id', taskId)
                .eq('user_id', session.user.id)
                .select()
                .single();

            if (error) {
                console.error('‚ùå useTasks: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
                setError(error.message);
                // –û—Ç–∫–∞—Ç
                setTasks(prev => prev.map(t => t.id === taskId ? (prevTask as Task) : t));
                return null;
            }

            console.log('‚úÖ useTasks: –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', data);

            const updatedTask: Task = {
                id: data.id,
                title: data.title,
                projectId: data.project_id,
                isCompleted: data.is_completed,
                priority: data.priority,
                tags: data.tags || [],
                dueDate: data.due_date,
                createdAt: data.created_at,
                updatedAt: data.updated_at,
            };

            setTasks(prev => prev.map(task => 
                task.id === taskId ? updatedTask : task
            ));

            return updatedTask;
        } catch (err) {
            console.error('‚ùå useTasks: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err);
            setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            return null;
        }
    }, [session]);

    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    const deleteTask = useCallback(async (taskId: string) => {
        if (!session?.user) {
            console.error('useTasks: –ù–µ—Ç —Å–µ—Å—Å–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');
            return false;
        }

        try {

            // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            const prevTasks = tasks;
            setTasks(prev => prev.filter(task => task.id !== taskId));

            const { error } = await supabase
                .from('tasks')
                .delete()
                .eq('id', taskId)
                .eq('user_id', session.user.id);

            if (error) {
                console.error('‚ùå useTasks: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
                setError(error.message);
                // –û—Ç–∫–∞—Ç
                setTasks(prevTasks);
                return false;
            }

            console.log('‚úÖ useTasks: –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞');

            setTasks(prev => prev.filter(task => task.id !== taskId));
            return true;
        } catch (err) {
            console.error('‚ùå useTasks: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err);
            setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            return false;
        }
    }, [session]);

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
    const toggleTask = useCallback(async (taskId: string) => {
        const task = tasks.find(t => t.id === taskId);
        if (!task) {
            console.error('useTasks: –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', taskId);
            return null;
        }

        // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π —Ç–æ–≥–≥–ª –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        const prev = task.isCompleted;
        setTasks(prevState => prevState.map(t => t.id === taskId ? { ...t, isCompleted: !prev } : t));
        try {
            return await updateTask(taskId, { isCompleted: !prev });
        } catch (e) {
            // –û—Ç–∫–∞—Ç –≤–µ—Ä–Ω—ë—Ç updateTask
            return null;
        }
    }, [tasks, updateTask]);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –ø—Ä–æ–µ–∫—Ç—É
    const getTasksByProject = useCallback((projectId: string | null) => {
        return tasks.filter(task => task.projectId === projectId);
    }, [tasks]);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–∏—Ö –∑–∞–¥–∞—á (–±–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞)
    const getGeneralTasks = useCallback(() => {
        return tasks.filter(task => task.projectId === null);
    }, [tasks]);

    // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫
    const clearError = useCallback(() => {
        setError(null);
    }, []);

    return {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        tasks,
        loading,
        error,
        
        // –§—É–Ω–∫—Ü–∏–∏
        fetchAllTasks,
        addTask,
        updateTask,
        deleteTask,
        toggleTask,
        getTasksByProject,
        getGeneralTasks,
        clearError,
    };
};
