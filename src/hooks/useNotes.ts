import { useState, useCallback, useRef, useEffect } from 'react';
import { Session } from '@supabase/supabase-js';
import { supabase } from '../supabaseClient';
import { Note, NoteContext } from '../types';
import { dataService } from '../services/storageService';

export const useNotes = (session: Session | null) => {
    const [notes, setNotes] = useState<Note[]>([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    
    // Debouncing –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
    const saveTimeouts = useRef<Map<string, NodeJS.Timeout>>(new Map());

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const fetchAllNotes = useCallback(async (session: Session | null) => {
        if (!session?.user?.id) {

            return;
        }

        setLoading(true);
        setError(null);

        try {

            const { data: notesData, error: notesError } = await supabase
                .from('notes')
                .select('*')
                .eq('user_id', session.user.id)
                .order('updated_at', { ascending: false });

            if (notesError) {
                console.error('üìù useNotes: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–º–µ—Ç–æ–∫:', notesError);
                throw notesError;
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            const transformedNotes: Note[] = (notesData || []).map(note => ({
                id: note.id,
                userId: note.user_id,
                content: note.content || '',
                context: note.context,
                entityId: note.entity_id || null,
                createdAt: note.created_at,
                updatedAt: note.updated_at,
            }));

            setNotes(transformedNotes);
            // –ö–µ—à–∏—Ä—É–µ–º –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
            dataService.setNotes(transformedNotes);

        } catch (error) {
            console.error('üìù useNotes: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–º–µ—Ç–æ–∫:', error);
            setError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–º–µ—Ç–æ–∫');
        } finally {
            setLoading(false);
        }
    }, []);

    // –ö–µ—à‚Äë–ø–µ—Ä–≤—ã–π —Å—Ç–∞—Ä—Ç
    useEffect(() => {
        const cached = dataService.getNotes();
        if (cached && cached.length) setNotes(cached);
    }, []);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∏ entity_id
    const getNote = useCallback((context: NoteContext, entityId: string | null = null): string => {
        const note = notes.find(n => n.context === context && n.entityId === entityId);
        return note?.content || '';
    }, [notes]);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ (upsert)
    const saveNote = useCallback(async (
        context: NoteContext, 
        content: string, 
        entityId: string | null = null
    ) => {
        if (!session?.user?.id) {
            console.error('üìù useNotes: –ù–µ—Ç —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏');
            return;
        }

        // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const noteKey = `${context}_${entityId || 'null'}`;
        const existingNote = notes.find(n => n.context === context && n.entityId === entityId);
        
        if (existingNote) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            setNotes(prev => prev.map(note => 
                note.id === existingNote.id 
                    ? { ...note, content }
                    : note
            ));
        } else {
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const tempNote: Note = {
                id: `temp_${Date.now()}`,
                userId: session.user.id,
                content,
                context,
                entityId,
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString(),
            };
            setNotes(prev => [tempNote, ...prev]);
        }

        // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è debouncing
        const debounceKey = `${context}_${entityId || 'null'}`;
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
        const existingTimeout = saveTimeouts.current.get(debounceKey);
        if (existingTimeout) {
            clearTimeout(existingTimeout);
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç
        const timeout = setTimeout(async () => {
            try {

                // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É (–Ω–µ –≤—Ä–µ–º–µ–Ω–Ω—É—é)
                const existingNote = notes.find(n => 
                    n.context === context && 
                    n.entityId === entityId && 
                    !n.id.startsWith('temp_')
                );

                if (existingNote) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É
                    const { data, error } = await supabase
                        .from('notes')
                        .update({ content })
                        .eq('id', existingNote.id)
                        .eq('user_id', session.user.id)
                        .select()
                        .single();

                    if (error) {
                        console.error('üìù useNotes: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', error);
                        throw error;
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    setNotes(prev => prev.map(note => 
                        note.id === existingNote.id 
                            ? { ...note, content, updatedAt: data.updated_at }
                            : note
                    ));

                } else {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
                    const { data, error } = await supabase
                        .from('notes')
                        .insert({
                            user_id: session.user.id,
                            content,
                            context,
                            entity_id: entityId,
                        })
                        .select()
                        .single();

                    if (error) {
                        console.error('üìù useNotes: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', error);
                        throw error;
                    }

                    // –ó–∞–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é
                    const newNote: Note = {
                        id: data.id,
                        userId: data.user_id,
                        content: data.content,
                        context: data.context,
                        entityId: data.entity_id || null,
                        createdAt: data.created_at,
                        updatedAt: data.updated_at,
                    };

                    setNotes(prev => prev.map(note => 
                        note.context === context && note.entityId === entityId && note.id.startsWith('temp_')
                            ? newNote
                            : note
                    ));

                }

            } catch (error) {
                console.error('üìù useNotes: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏:', error);
                setError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏');
            }
        }, 500); // Debounce 500ms –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç
        saveTimeouts.current.set(debounceKey, timeout);

    }, [session, notes]);

    // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    const cleanup = useCallback(() => {
        saveTimeouts.current.forEach(timeout => clearTimeout(timeout));
        saveTimeouts.current.clear();
    }, []);

    return {
        notes,
        loading,
        error,
        fetchAllNotes,
        getNote,
        saveNote,
        cleanup,
    };
};
