import { useCallback, useState } from 'react';
import { supabase } from '../supabaseClient';
import type { Session } from '@supabase/supabase-js';
import type { CompanyProfile } from '../types';
import { useFileStorage } from './useFileStorage';

export const useCompanyProfile = (session: Session | null) => {
  const [profile, setProfile] = useState<CompanyProfile>({ name: '', details: '', logo: null });
  const [loading, setLoading] = useState(false);
  const { uploadFileWithFallback } = useFileStorage();

  const mapRowToProfile = (row: any): CompanyProfile => ({
    name: row?.name || '',
    details: row?.details || '',
    logo: row?.logo_url || null,
  });

  const fetchProfile = useCallback(async (sess: Session | null = session, retryCount = 0) => {
    if (!sess?.user?.id) {

      setProfile({ name: '', details: '', logo: null });
      return;
    }

    setLoading(true);
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º (—Å–ª–µ–¥—É–µ–º SUPABASE_SAFETY_GUIDE)
      await new Promise(resolve => setTimeout(resolve, 100 * (retryCount + 1)));
      
      const { data, error } = await supabase
        .from('company_profiles')
        .select('*')
        .eq('user_id', sess.user.id)
        .maybeSingle();
      
      if (error) {
        console.error('üîß useCompanyProfile.fetchProfile error:', error);
        
        // Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å–ª–µ–¥—É–µ–º SUPABASE_SAFETY_GUIDE)
        if (retryCount < 2 && error.message.includes('Database connection error')) {

          setTimeout(() => {
            fetchProfile(sess, retryCount + 1);
          }, 2000 * (retryCount + 1));
          return;
        }
        
        return;
      }

      if (data) {
        const mappedProfile = mapRowToProfile(data);

        setProfile(mappedProfile);
      } else {

      }
    } catch (error) {
      console.error('üîß useCompanyProfile.fetchProfile: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –∫—Ä–∞—Ö–∞
      setProfile({ name: '', details: '', logo: null });
    } finally {
      setLoading(false);
    }
  }, [session]);

  const saveProfile = useCallback(async (data: Partial<CompanyProfile>, retryCount = 0) => {
    if (!session?.user?.id) {

      return;
    }

    setLoading(true);
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º (—Å–ª–µ–¥—É–µ–º SUPABASE_SAFETY_GUIDE)
      await new Promise(resolve => setTimeout(resolve, 100 * (retryCount + 1)));
      
      const row = {
        id: undefined as string | undefined, // let DB default/keep existing
        user_id: session.user.id,
        name: data.name ?? profile.name,
        details: data.details ?? profile.details,
        logo_url: data.logo === undefined ? profile.logo : data.logo,
        updated_at: new Date().toISOString(),
      } as any;

      const { data: upserted, error } = await supabase
        .from('company_profiles')
        .upsert(row, { onConflict: 'user_id' })
        .select('*')
        .single();
      
      if (error) {
        console.error('üîß useCompanyProfile.saveProfile error:', error);
        
        // Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å–ª–µ–¥—É–µ–º SUPABASE_SAFETY_GUIDE)
        if (retryCount < 2 && error.message.includes('Database connection error')) {

          setTimeout(() => {
            saveProfile(data, retryCount + 1);
          }, 2000 * (retryCount + 1));
          return;
        }
        
        return;
      }

      const mappedProfile = mapRowToProfile(upserted);

      setProfile(mappedProfile);
    } catch (error) {
      console.error('üîß useCompanyProfile.saveProfile: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    } finally {
      setLoading(false);
    }
  }, [session, profile]);

  const uploadLogo = useCallback(async (file: File) => {
    if (!session?.user?.id) return;

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–ß–ù–û –¢–£ –ñ–ï –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç–∞—Ö
      const uploadResult = await uploadFileWithFallback('logos', file);
      
      if (uploadResult.error) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ "${file.name}": ${uploadResult.error}`);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω–æ–≤—ã–º –ª–æ–≥–æ—Ç–∏–ø–æ–º
      await saveProfile({ logo: uploadResult.publicUrl });

    } catch (error) {
      console.error('üîß uploadLogo: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞:', error);
    }
  }, [session, saveProfile, uploadFileWithFallback]);

  const removeLogo = useCallback(async () => {
    await saveProfile({ logo: null });
  }, [saveProfile]);

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞
  const diagnoseLogo = useCallback(async () => {

    if (profile.logo) {

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø URL
      if (profile.logo.includes('multipart') || profile.logo.includes('form-data')) {
        console.error('‚ùå URL —Å–æ–¥–µ—Ä–∂–∏—Ç multipart/form-data - —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL!');
        console.error('‚ùå –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å getPublicUrl() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        return;
      }
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const img = new Image();
        img.onload = () => {
          console.log('‚úÖ –õ–æ–≥–æ—Ç–∏–ø –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ!');
          console.log('‚úÖ –†–∞–∑–º–µ—Ä—ã:', img.width, 'x', img.height);
        };
        img.onerror = (error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞:', error);
          console.error('‚ùå URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', profile.logo);
        };
        img.src = profile.logo;
        
        // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ fetch
        try {
          const response = await fetch(profile.logo, { method: 'HEAD' });

          console.log('üîç Content-Type:', response.headers.get('content-type'));
          
          if (response.status === 200) {
            console.log('‚úÖ –õ–æ–≥–æ—Ç–∏–ø –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTP');
          } else if (response.status === 544) {
            console.error('‚ùå DatabaseTimeout - —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            console.error('üìã –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å Supabase Storage');
            console.error('üìã –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥');
          } else {
            console.error('‚ùå –õ–æ–≥–æ—Ç–∏–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);
          }
        } catch (fetchError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ fetch –ª–æ–≥–æ—Ç–∏–ø–∞:', fetchError);
          if (fetchError.message.includes('timeout') || fetchError.message.includes('DatabaseTimeout')) {
            console.error('üìã –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
          }
        }
      } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞:', error);
      }
    } else {

    }
  }, [profile]);

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Supabase Storage
  const diagnoseStorage = useCallback(async () => {

    if (!session?.user?.id) {
      console.error('‚ùå –ù–µ—Ç —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }
    
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Supabase

      console.log('üîç Supabase Key:', supabase.supabaseKey?.substring(0, 20) + '...');
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å bucket "logos" —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º

      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è buckets
      const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
      
      if (bucketsError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ buckets:', bucketsError);
        console.error('‚ùå –ö–æ–¥ –æ—à–∏–±–∫–∏:', bucketsError.statusCode);
        console.error('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ:', bucketsError.message);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±

        try {
          const { data: testData, error: testError } = await supabase.storage.from('logos').list('', { limit: 1 });
          if (testError) {
            console.error('‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', testError);
          } else {
            console.log('‚úÖ Bucket "logos" –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±!');
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', testData);
          }
        } catch (altError) {
          console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞:', altError);
        }
        return;
      }

      const logosBucket = buckets.find(bucket => bucket.name === 'logos');
      
      if (!logosBucket) {
        console.error('‚ùå Bucket "logos" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ!');
        console.error('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ buckets:', buckets.map(b => b.name));
        console.error('üìã –î–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã:');
        console.error('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ bucket "logos" —Å–æ–∑–¥–∞–Ω –≤ Supabase Dashboard');
        console.error('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ bucket –ø—É–±–ª–∏—á–Ω—ã–π');
        console.error('3. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞');
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ bucket –Ω–∞–ø—Ä—è–º—É—é

        try {
          const { data: directData, error: directError } = await supabase.storage.from('logos').list('', { limit: 1 });
          if (directError) {
            console.error('‚ùå –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ bucket "logos" –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', directError);
          } else {
            console.log('‚úÖ –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ bucket "logos" —Ä–∞–±–æ—Ç–∞–µ—Ç!');
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ:', directData);
          }
        } catch (directErr) {
          console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:', directErr);
        }
        return;
      }
      
      console.log('‚úÖ Bucket "logos" –Ω–∞–π–¥–µ–Ω:', logosBucket);
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ bucket

      const { data: files, error: filesError } = await supabase.storage
        .from('logos')
        .list(session.user.id);
      
      if (filesError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', filesError);
        return;
      }

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
      if (profile.logo) {
        const urlParts = profile.logo.split('/');
        const fileName = urlParts[urlParts.length - 1];
        const userFolder = urlParts[urlParts.length - 2];

        const { data: fileData, error: fileError } = await supabase.storage
          .from('logos')
          .download(`${userFolder}/${fileName}`);
        
        if (fileError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', fileError);
          console.error('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        } else {
          console.log('‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω!');
          console.log('‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', fileData.size, '–±–∞–π—Ç');
        }
      }
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ Storage:', error);
    }
  }, [session, profile]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ Supabase
  const refreshSupabaseCache = useCallback(async () => {

    try {
      // –û—á–∏—â–∞–µ–º –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è Supabase
      if ('caches' in window) {
        const cacheNames = await caches.keys();
        const supabaseCaches = cacheNames.filter(name => name.includes('supabase'));
        for (const cacheName of supabaseCaches) {
          await caches.delete(cacheName);

        }
      }
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
      const { data: { session: newSession }, error: sessionError } = await supabase.auth.getSession();
      if (sessionError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', sessionError);
      } else {
        console.log('‚úÖ –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      }
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ bucket
      const { data: testData, error: testError } = await supabase.storage.from('logos').list('', { limit: 1 });
      if (testError) {
        console.error('‚ùå Bucket "logos" –≤—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', testError);
      } else {
        console.log('‚úÖ Bucket "logos" –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞!');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞:', error);
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö URL –ª–æ–≥–æ—Ç–∏–ø–∞
  const fixLogoUrl = useCallback(async () => {

    if (!profile.logo) {

      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
    if (profile.logo.includes('multipart') || profile.logo.includes('form-data')) {
      console.error('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL —Å multipart/form-data');
      console.error('‚ùå –¢–µ–∫—É—â–∏–π URL:', profile.logo);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ URL
      const urlParts = profile.logo.split('/');
      const fileName = urlParts[urlParts.length - 1];
      const userFolder = urlParts[urlParts.length - 2];

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
      const { data: urlData } = supabase.storage.from('logos').getPublicUrl(`${userFolder}/${fileName}`);
      const correctUrl = urlData.publicUrl;
      
      console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL:', correctUrl);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ URL
      try {
        const testResponse = await fetch(correctUrl, { method: 'HEAD' });

        
        if (testResponse.headers.get('content-type')?.includes('image/')) {
          console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');

          await saveProfile({ logo: correctUrl });
          console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL');
        } else {
          console.error('‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL —Ç–æ–∂–µ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
        }
      } catch (testError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ URL:', testError);
      }
    } else {
      console.log('‚úÖ URL –ª–æ–≥–æ—Ç–∏–ø–∞ –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    }
  }, [profile, saveProfile]);

  return {
    profile,
    setProfile,
    loading,
    fetchProfile,
    saveProfile,
    uploadLogo,
    removeLogo,
    diagnoseLogo, // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞
    diagnoseStorage, // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Storage
    refreshSupabaseCache, // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞
    fixLogoUrl, // –§—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è URL –ª–æ–≥–æ—Ç–∏–ø–∞
  };
};

export default useCompanyProfile;

