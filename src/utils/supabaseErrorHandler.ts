/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Supabase
 */

export interface SupabaseError {
  code?: string;
  message: string;
  details?: string;
  hint?: string;
}

export interface RetryConfig {
  maxAttempts: number;
  baseDelay: number;
  maxDelay: number;
  backoffMultiplier: number;
}

const DEFAULT_RETRY_CONFIG: RetryConfig = {
  maxAttempts: 3,
  baseDelay: 1000,
  maxDelay: 10000,
  backoffMultiplier: 2,
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
 */
export function isRetryableError(error: any): boolean {
  if (!error) return false;
  
  const errorCode = error.code || error.message || '';
  const errorMessage = String(error.message || '').toLowerCase();
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
  if (errorCode === 'PGRST002' || errorCode === 'PGRST003') return true;
  
  // –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
  if (errorMessage.includes('network') || errorMessage.includes('fetch')) return true;
  
  // HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
  if (error.status >= 500 && error.status < 600) return true; // 5xx –æ—à–∏–±–∫–∏
  if (error.status === 429) return true; // Too Many Requests
  
  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Supabase
  if (errorMessage.includes('service unavailable')) return true;
  if (errorMessage.includes('timeout')) return true;
  if (errorMessage.includes('connection')) return true;
  
  return false;
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff
 */
export function calculateDelay(attempt: number, config: RetryConfig): number {
  const delay = config.baseDelay * Math.pow(config.backoffMultiplier, attempt - 1);
  return Math.min(delay, config.maxDelay);
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
 */
export async function withRetry<T>(
  fn: () => Promise<T>,
  config: Partial<RetryConfig> = {}
): Promise<T> {
  const finalConfig = { ...DEFAULT_RETRY_CONFIG, ...config };
  let lastError: any;
  
  for (let attempt = 1; attempt <= finalConfig.maxAttempts; attempt++) {
    try {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${finalConfig.maxAttempts}`);
      return await fn();
    } catch (error: any) {
      lastError = error;
      
      console.warn(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, {
        code: error?.code,
        message: error?.message,
        status: error?.status,
      });
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
      if (attempt === finalConfig.maxAttempts || !isRetryableError(error)) {
        console.error(`‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏`);
        throw error;
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –∂–¥–µ–º
      const delay = calculateDelay(attempt, finalConfig);
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  throw lastError;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ Supabase –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
export function handleSupabaseError(error: any): string {
  if (!error) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
  
  // –û—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  if (error.code === 'PGRST301' || error.message?.includes('JWT')) {
    return '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.';
  }
  
  // –û—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
  if (error.code === 'PGRST301' || error.message?.includes('permission')) {
    return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
  }
  
  // –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
  if (error.message?.includes('network') || error.message?.includes('fetch')) {
    return '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
  }
  
  // –û—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
  if (error.status >= 500) {
    return '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  }
  
  // –û—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
  if (error.status >= 400 && error.status < 500) {
    return '–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
  }
  
  // –û–±—â–∏–µ –æ—à–∏–±–∫–∏ Supabase
  if (error.code?.startsWith('PGRST')) {
    return `–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
  }
  
  return error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä Supabase
 */
export async function checkSupabaseHealth(supabase: any): Promise<boolean> {
  try {
    const { error } = await supabase.from('projects').select('count').limit(1);
    return !error;
  } catch {
    return false;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
export function createErrorHandler() {
  return (error: any, context: string = '') => {
    const message = handleSupabaseError(error);
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${context}:`, {
      original: error,
      handled: message,
    });
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ toast –∏–ª–∏ state management
    
    return message;
  };
}
