import React, { useState, useEffect } from 'react';
import { supabase } from '../../supabaseClient';
import { checkSupabaseHealth } from '../../utils/supabaseErrorHandler';

interface ConnectionStatusProps {
  className?: string;
}

export const ConnectionStatus: React.FC<ConnectionStatusProps> = ({ className = '' }) => {
  const [isOnline, setIsOnline] = useState(true);
  const [isSupabaseHealthy, setIsSupabaseHealthy] = useState(false); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é false –¥–ª—è –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
  const [lastCheck, setLastCheck] = useState<Date | null>(null);

  useEffect(() => {
    const checkConnection = async () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      const online = navigator.onLine;
      setIsOnline(online);

      if (online) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ Supabase
        const healthy = await checkSupabaseHealth(supabase);
        setIsSupabaseHealthy(healthy);
        setLastCheck(new Date());
      } else {
        setIsSupabaseHealthy(false);
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É
    checkConnection();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(checkConnection, 30000);

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
    const handleOnline = () => {
      setIsOnline(true);
      checkConnection();
    };

    const handleOffline = () => {
      setIsOnline(false);
      setIsSupabaseHealthy(false);
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      clearInterval(interval);
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  const getStatusColor = () => {
    if (!isOnline) return 'bg-red-500';
    if (!isSupabaseHealthy) return 'bg-yellow-500';
    return 'bg-green-500';
  };

  const getStatusText = () => {
    if (!isOnline) return '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É';
    if (!isSupabaseHealthy) return '–û—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º (localStorage)';
    return '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ';
  };

  const getStatusIcon = () => {
    if (!isOnline) return 'üì°';
    if (!isSupabaseHealthy) return '‚ö†Ô∏è';
    return '‚úÖ';
  };

  return (
    <div className={`flex items-center gap-2 text-sm ${className}`}>
      <div className={`w-2 h-2 rounded-full ${getStatusColor()}`}></div>
      <span className="text-gray-600">
        {getStatusIcon()} {getStatusText()}
      </span>
      {lastCheck && (
        <span className="text-xs text-gray-400">
          ({lastCheck.toLocaleTimeString()})
        </span>
      )}
    </div>
  );
};
